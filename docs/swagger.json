{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Technical task for the position of Junior Golang Developer at Effective Mobile",
        "title": "Effective Mobile Task API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/add": {
            "post": {
                "description": "Takes basic person details (name, surname, patronymic(optional)), enriches them with additional data (age, gender, nationality), saves the complete record to the database, and returns the newly generated ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "People"
                ],
                "summary": "Add a new person after enrichment",
                "operationId": "add-person",
                "parameters": [
                    {
                        "description": "Basic person details (name, surname, patronymic(optional)) to add and enrich.",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.addRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added person, returns the new person's ID.\" example(12345) // Assuming ID is an integer",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Error decoding JSON request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed: The HTTP method must be POST.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to enrich person data or save the person to the database.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/delete": {
            "delete": {
                "description": "Deletes a person record from the system based on the ID provided as a query parameter.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "People"
                ],
                "summary": "Delete a person by ID",
                "operationId": "delete-person-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 123,
                        "description": "ID of the person to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted person (No content returned, only status)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: 'id' query parameter is required or must be an integer.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed: The HTTP method used is not DELETE.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to delete the person from the database.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/get": {
            "get": {
                "description": "Retrieves a paginated list of people based on filter criteria provided as query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "People"
                ],
                "summary": "Get a list of people",
                "operationId": "get-people-list",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "description": "Number of items to return per page (must be between 1 and 100)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "description": "Cursor for pagination (indicates the starting item index). Defaults to 0.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Ivan",
                        "description": "Filter by exact name (case-sensitive)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Ivanov",
                        "description": "Filter by exact surname (case-sensitive)",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Ivanovich",
                        "description": "Filter by exact patronymic (case-sensitive)",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 30,
                        "description": "Filter by exact age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "male",
                        "description": "Filter by gender (e.g., 'male', 'female')",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "UA",
                        "description": "Filter by nationality code",
                        "name": "nationality",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of people and the cursor for the next page",
                        "schema": {
                            "$ref": "#/definitions/api.getResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid query parameter value or format (e.g., non-integer limit, limit out of range, negative age/cursor).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed: The HTTP method used is not GET.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to retrieve data from the database or failed to marshal the JSON response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update": {
            "put": {
                "description": "Updates fields for an existing person based on the provided data. Only non-empty fields in the request body are typically used for the update. Requires the person's ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "People"
                ],
                "summary": "Update a person's details",
                "operationId": "update-person-details",
                "parameters": [
                    {
                        "description": "Person data to update. Include the ID of the person and the fields to change.",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated person (No content returned, only status)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Error decoding JSON request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed: The HTTP method must be PUT or PATCH.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to update the person in the database.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates fields for an existing person based on the provided data. Only non-empty fields in the request body are typically used for the update. Requires the person's ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "People"
                ],
                "summary": "Update a person's details",
                "operationId": "update-person-details",
                "parameters": [
                    {
                        "description": "Person data to update. Include the ID of the person and the fields to change.",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated person (No content returned, only status)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Error decoding JSON request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed: The HTTP method must be PUT or PATCH.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to update the person in the database.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.addRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "api.getResponse": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "integer"
                },
                "people": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.Person"
                    }
                }
            }
        },
        "api.updateRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "store.Person": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}